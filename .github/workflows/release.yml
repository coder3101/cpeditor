name: "Release"

on: [push]
        #  push:
        #tags:
        #- "*"

env:
  QT_VERSION: 5.15.0

jobs:
  release:
    name: "release on ${{ matrix.config.os }} with portable ${{ matrix.config.portable-option }}"
    runs-on: "${{ matrix.config.os }}"
    strategy:
      fail-fast: false
      matrix:
        config:
          - { os: "ubuntu-16.04", portable-option: "Off", portable-name: "" }
          - {
              os: "ubuntu-16.04",
              portable-option: "On",
              portable-name: "-portable",
            }
          - {
              os: "windows-latest",
              portable-option: "Off",
              portable-name: "-setup.exe",
            }
          - {
              os: "windows-latest",
              portable-option: "On",
              portable-name: "-portable.zip",
            }
          - { os: "macos-latest", portable-option: "Off", portable-name: "" }
          - {
              os: "macos-latest",
              portable-option: "On",
              portable-name: "-portable",
            }
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Install Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: 3.7

      - name: Install Qt on Ubuntu
        if: startsWith(matrix.config.os, 'ubuntu')
        run: |
          sudo add-apt-repository ppa:beineri/opt-qt-5.15.0-xenial -y
          sudo apt-get update -qq
          sudo apt-get -y install qt515base libgl1-mesa-dev qt515svg qt515imageformats
          bash /opt/qt*/bin/qt*-env.sh

      - name: Restore Qt from cache on Windows and macOS
        if: startsWith(matrix.config.os, 'windows') || startsWith(matrix.config.os, 'macos')
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ../Qt
          key: Qt-${{ matrix.config.os }}-${{ env.QT_VERSION }}

      - name: Set up Qt environment on Windows and macOS
        if: startsWith(matrix.config.os, 'windows') || startsWith(matrix.config.os, 'macos')
        uses: jurplel/install-qt-action@v2
        with:
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
          version: ${{ env.QT_VERSION }}

      - name: Build
        run: |
          mkdir build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DPORTABLE_VERSION=${{ matrix.config.portable-option }} 
          cmake --build . --config Release -j2

      - name: Get the version
        id: get_version
        shell: bash
        run: |
          VERSION=${GITHUB_REF/refs\/tags\//}
          echo ::set-output name=VERSION::$VERSION
          read STABLE_VERSION < .ci/STABLE_VERSION
          if [ "${VERSION:0:${#STABLE_VERSION}}" == "$STABLE_VERSION" ]; then
            echo ::set-output name=ISBETA::false
          else
            echo ::set-output name=ISBETA::true
          fi

      - name: Pack to AppImage
        if: startsWith(matrix.config.os, 'ubuntu')
        run: |
          bash /opt/qt*/bin/qt*-env.sh
          cd build
          wget -c "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage"
          chmod a+x linuxdeployqt*.AppImage
          export VERSION=${{ steps.get_version.outputs.VERSION }}
          cmake --install . --prefix appdir/usr
          mkdir -p appdir/usr/share/metainfo
          cp ../.ci/linux/cpeditor.appdata.xml appdir/usr/share/metainfo

          ./linuxdeployqt*.AppImage appdir/usr/share/applications/cpeditor.desktop -appimage -qmake=/opt/qt515/bin/qmake
          mv CP_Editor-${{steps.get_version.outputs.VERSION }}-x86_64.AppImage cpeditor-${{ steps.get_version.outputs.VERSION }}-linux-x86_64${{ matrix.config.portable-name }}.AppImage

      - name: Release AppImage
        if: startsWith(matrix.config.os, 'ubuntu')
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          prerelease: ${{ steps.get_version.outputs.ISBETA }}
          files: build/cpeditor-${{ steps.get_version.outputs.VERSION }}-linux-x86_64${{ matrix.config.portable-name }}.AppImage
          name: CP Editor ${{ steps.get_version.outputs.VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Package full Source
        if: startsWith(matrix.config.os, 'ubuntu') && matrix.config.portable-option == 'Off'
        run: |
          wget https://raw.githubusercontent.com/Kentzo/git-archive-all/master/git_archive_all.py
          python3 git_archive_all.py cpeditor-${{ steps.get_version.outputs.VERSION }}-full-source.tar.gz

      - name: Release full source
        if: startsWith(matrix.config.os, 'ubuntu') && matrix.config.portable-option == 'Off'
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          prerelease: ${{ steps.get_version.outputs.ISBETA }}
          files: cpeditor-${{ steps.get_version.outputs.VERSION }}-full-source.tar.gz
          name: CP Editor ${{ steps.get_version.outputs.VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Pack to dmg on Mac
        if: startsWith(matrix.config.os, 'macos')
        run: |
          cd build
          ../../Qt/*/*/bin/macdeployqt cpeditor.app
          cp ../.ci/mac/cpeditor.icns cpeditor.app/Contents/Resources
          hdiutil create -volname cpeditor-${{ steps.get_version.outputs.VERSION }}-x64 -srcfolder cpeditor.app -ov -format UDZO cpeditor-${{ steps.get_version.outputs.VERSION }}-macos-x64${{ matrix.config.portable-name }}.dmg

      - name: Release on Mac
        if: startsWith(matrix.config.os, 'macos')
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          prerelease: ${{ steps.get_version.outputs.ISBETA }}
          files: build/cpeditor-${{ steps.get_version.outputs.VERSION }}-macos-x64${{ matrix.config.portable-name }}.dmg
          name: CP Editor ${{ steps.get_version.outputs.VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Gather dependencies on Windows
        if: startsWith(matrix.config.os, 'windows')
        shell: bash
        run: |
          mkdir build/out
          mv build/Release/cpeditor.exe build/out
          ../Qt/*/*/bin/windeployqt.exe build/out/cpeditor.exe --no-translations
          cd "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Redist/MSVC"
          echo ::set-env name=VC_REDIST_VERSION::$(ls -dr *.* | head -n1)

      - name: Pack to installer on Windows
        if: startsWith(matrix.config.os, 'windows') && matrix.config.portable-option == 'Off'
        shell: bash
        run: |
          mkdir build/out/Redist
          cp "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Redist/MSVC/$VC_REDIST_VERSION/vc_redist.x64.exe" build/out/Redist
          iscc .ci/win/win-setup.iss -DMyAppVersion=${{ steps.get_version.outputs.VERSION }} -DMyProjectRoot=$(pwd) -DMyOutRoot=$(pwd)/build/out -DVC_REDIST_VERSION=$VC_REDIST_VERSION
          mv cpeditor-${{ steps.get_version.outputs.VERSION }}-x64-setup.exe cpeditor-${{ steps.get_version.outputs.VERSION }}-windows-x64${{ matrix.config.portable-name }}

      - name: Pack to portable on Windows
        if: startsWith(matrix.config.os, 'windows') && matrix.config.portable-option == 'On'
        shell: bash
        run: |
          cp "C:/Program Files (x86)/Microsoft Visual Studio"/2019/Enterprise/VC/Redist/MSVC/$VC_REDIST_VERSION/x64/Microsoft.*.CRT/*.dll build/out
          cd build/out
          7z a ../../cpeditor-${{ steps.get_version.outputs.VERSION }}-windows-x64${{ matrix.config.portable-name }} ./*

      - name: Release on Windows
        if: startsWith(matrix.config.os, 'windows')
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          prerelease: ${{ steps.get_version.outputs.ISBETA }}
          files: cpeditor-${{ steps.get_version.outputs.VERSION }}-windows-x64${{ matrix.config.portable-name }}
          name: CP Editor ${{ steps.get_version.outputs.VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
